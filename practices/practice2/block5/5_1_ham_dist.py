# Редакционное расстояние Хэмминга определяет минимальное число позиций,
# в которых нужно произвести замену символов, чтобы получить
# из одной последовательности длины n другую последовательность той же длины.
#
# Реализуйте функцию вычисления расстояния Хэмминга
# для двух чисел, на уровне замен бит.
#
# Реализуйте сначала наивную версию, а затем придумайте, как изящно
# написать функцию в виде однострочника
# с использованием средств современного Питона.


def ham_dist(num1: int, num2: int) -> int:
    num1 = bin(num1)
    num2 = bin(num2)

    if len(num1) > len(num2):
        num2 = format(int(num2, 2), f'#0{len(num1)}b')
    elif len(num1) < len(num2):
        num1 = format(int(num1, 2), f'#0{len(num2)}b')

    return sum(c1 != c2 for c1, c2 in zip(num1, num2))


print(ham_dist(0b1100, 0b0011))
